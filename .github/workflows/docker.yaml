name: docker

on:
  release:
    types: [published]

jobs:
  build:
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    env:
      REGISTRY: index.docker.io
      REGISTRY_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux/amd64
          - os: macos-latest
            platform: linux/arm64

    runs-on: ${{ matrix.os }}

    outputs:
      VERSION: ${{ steps.vars.outputs.VERSION }}
      MAJOR: ${{ steps.vars.outputs.MAJOR }}
      MINOR: ${{ steps.vars.outputs.MINOR }}

    steps:
      - name: Install Docker on macOS
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew install docker
          curl -Lo /tmp/colima https://github.com/abiosoft/colima/releases/latest/download/colima-darwin-arm64
          chmod +x /tmp/colima
          sudo mv /tmp/colima /usr/local/bin
          colima --version
          colima start
          docker version

      - name: Publish version env var
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version parts
        id: vars
        run: |
          IFS='.' read -r MAJOR MINOR PATCH <<< "${{ env.VERSION }}"
          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "MINOR=$MINOR" >> $GITHUB_ENV
          echo "VERSION=${{ env.VERSION }}" >> $GITHUB_OUTPUT
          echo "MAJOR=$MAJOR" >> $GITHUB_OUTPUT
          echo "MINOR=$MINOR" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_NAME }}
          tags: |
            ${{ env.VERSION }}
            latest
            ${{ env.MAJOR }}
            ${{ env.MAJOR }}.${{ env.MINOR }}
          annotations: |
            org.opencontainers.image.title=${{ env.REGISTRY_NAME }}
            org.opencontainers.image.description=$(cat README.md)

      - name: Build and push
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            BUILD_ID=${{ github.run_id }}
            COMMIT_ID=$(git rev-parse --short "$GITHUB_SHA")

      - name: Extract image digests
        id: extract-digest
        shell: bash
        run: |
          for tag in $(echo ${{ steps.meta.outputs.tags }} | tr ',' '\n'); do
            digest=$(docker inspect --format='{{index .RepoDigests 0}}' $tag)
            normalized_tag=$(echo "$tag" | tr ':' '_' | tr '.' '_')
            echo "${normalized_tag}=${digest}" >> digest_mapping.txt
          done

      - name: Upload digest mapping file
        uses: actions/upload-artifact@v4
        with:
          name: digest_mapping
          path: digest_mapping.txt

  attest:
    needs: build
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    env:
      REGISTRY: index.docker.io
      REGISTRY_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}

    strategy:
      matrix:
        tag: ["latest", "${{ needs.build.outputs.VERSION }}", "${{ needs.build.outputs.MAJOR }}", "${{ needs.build.outputs.MAJOR }}.${{ needs.build.outputs.MINOR }}"]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download digest mapping file
        uses: actions/download-artifact@v4
        with:
          name: digest_mapping

      - name: Set digest for tag
        id: set-digest
        run: |
          normalized_tag=$(echo "${{ matrix.tag }}" | tr ':' '_' | tr '.' '_')
          echo "TAG_DIGEST=$(grep "^${normalized_tag}=" digest_mapping.txt | cut -d '=' -f 2)" >> $GITHUB_ENV

      - name: Attest
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY_NAME }}:${{ matrix.tag }}
          subject-digest: ${{ env.TAG_DIGEST }}
          push-to-registry: true
