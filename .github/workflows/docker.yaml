name: docker

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    env:
      REGISTRY: index.docker.io
      REGISTRY_NAME: fontebasso/php-nginx

    outputs:
      VERSION: ${{ steps.vars.outputs.VERSION }}
      MAJOR: ${{ steps.vars.outputs.MAJOR }}
      MINOR: ${{ steps.vars.outputs.MINOR }}

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Publish version env var
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: fontebasso
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version parts
        id: vars
        run: |
          IFS='.' read -r MAJOR MINOR PATCH <<< "${{ env.VERSION }}"
          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "MINOR=$MINOR" >> $GITHUB_ENV
          echo "VERSION=${{ env.VERSION }}" >> $GITHUB_OUTPUT
          echo "MAJOR=$MAJOR" >> $GITHUB_OUTPUT
          echo "MINOR=$MINOR" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_NAME }}
          tags: |
            ${{ env.VERSION }}
            ${{ env.MAJOR }}.${{ env.MINOR }}
            ${{ env.MAJOR }}
            latest
          annotations: |
            org.opencontainers.image.title=${{ env.REGISTRY_NAME }}
            org.opencontainers.image.description=$(cat README.md)

      - name: Build and push
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          push: true
          provenance: mode=max
          sbom: true
          build-args: |
            BUILD_ID=${{ github.run_id }}
            COMMIT_ID=$(git rev-parse --short "$GITHUB_SHA")
            
      - name: Extract provenance
        shell: bash
        run: |
          echo $(jq -r '.provenance[]' < $GITHUB_WORKSPACE/.github/actions/buildx/output.json) > provenance.json        

      - name: Upload provenance
        uses: actions/upload-artifact@v4
        with:
          name: provenance
          path: provenance.json

      - name: Generate SBOM
        id: sbom
        shell: bash
        run: |
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | grep -Ev '^$' | tr ',' '\n'); do
            for platform in linux/amd64; do
              digest=$(docker buildx imagetools inspect "${tag}" --raw | jq -r ".manifests[] | select(.platform.architecture==\"${platform##*/}\") | .digest")
              if [ -n "$digest" ]; then
                normalized_tag=$(echo "${tag}_${platform}" | tr ':' '_' | tr '.' '_' | tr '/' '_' | tr '-' '_')
                mkdir -p sbom
                syft "${tag}" -o spdx-json > "sbom/${normalized_tag}.sbom.spdx.json"
              fi
            done
          done

      - name: Upload SBOM files
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom

  sign:
    runs-on: ubuntu-latest
    needs: build
    env:
      REGISTRY_NAME: fontebasso/php-nginx

    strategy:
      matrix:
        platform: ["linux/amd64"]
        tags: ["latest", "${{ needs.build.outputs.VERSION }}", "${{ needs.build.outputs.MAJOR }}.${{ needs.build.outputs.MINOR }}", "${{ needs.build.outputs.MAJOR }}"]

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: fontebasso
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull image for signing
        run: |
          docker pull ${{ env.REGISTRY_NAME }}:${{ matrix.tags }}

      - name: Sign image with Docker Content Trust
        run: |
          echo "${{ secrets.B64_DOCKER_DCT_KEY }}" | base64 -d > delegation.key
          echo "${{ secrets.B64_DOCKER_DCT_PUB }}" | base64 -d > delegation.crt
          chmod 600 delegation.key
          docker trust key load delegation.key --name fontebasso
          docker trust signer add --key delegation.crt fontebasso ${{ env.REGISTRY_NAME }}
          docker trust sign ${{ env.REGISTRY_NAME }}:${{ matrix.tags }}
          docker trust inspect --pretty ${{ env.REGISTRY_NAME }}:${{ matrix.tags }}
        env:
          DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE: ${{ secrets.DOCKER_DCT_KEY_PASSWORD }}
          DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: ${{ secrets.DOCKER_DCT_KEY_PASSWORD }}

      - name: Cosign install
        run: |
          curl -LO https://github.com/sigstore/cosign/releases/download/v2.2.4/cosign-linux-amd64
          chmod +x cosign-linux-amd64
          mv cosign-linux-amd64 cosign

      - name: Load Cosign key
        run: |
          echo "${{ secrets.B64_COSIGN_KEY }}" | base64 -d > cosign.key
          echo "${{ secrets.B64_COSIGN_PUB }}" | base64 -d > cosign.pub

      - name: Sign image with Cosign
        run: |
          ./cosign sign -key cosign.key ${{ env.REGISTRY_NAME }}:${{ matrix.tags }}
          ./cosign verify -key cosign.pub ${{ env.REGISTRY_NAME }}:${{ matrix.tags }}

      - name: Download SBOM files
        uses: actions/download-artifact@v4
        with:
          name: sbom
          path: ./sbom-extracted

      - name: Prepare SBOM filename
        run: |
          normalized_tag=$(echo "${{ env.REGISTRY_NAME }}:${{ matrix.tag }}_${{ matrix.platform }}" | tr ':' '_' | tr '.' '_' | tr '/' '_' | tr '-' '_')
          echo "TAG_NORMALIZED=${normalized_tag}" >> $GITHUB_ENV
          
      - name: Cosign attest SBOM
        run: |
          ./cosign attest --key cosign.key --predicate ./sbom-extracted/${{ env.TAG_NORMALIZED }}.sbom.spdx.json --type spdxjson ${{ env.REGISTRY_NAME }}:${{ matrix.tags }}
          ./cosign verify-attestation --key cosign.pub --type spdxjson ${{ env.REGISTRY_NAME }}:${{ matrix.tags }}

      - name: Download provenance
        uses: actions/download-artifact@v4
        with:
          name: provenance

      - name: Cosign attest Provenance
        run: |
            ./cosign attest --key cosign.key --predicate provenance.json --type slsaprovenance ${{ env.REGISTRY_NAME }}:${{ matrix.tags }}
            ./cosign verify-attestation --key cosign.pub --type slsaprovenance ${{ env.REGISTRY_NAME }}:${{ matrix.tags }}

      - name: Publish signature Rekor
        run: |
          cosign sign --key cosign.key --rekor-url https://rekor.sigstore.dev ${{ env.REGISTRY_NAME }}:${{ matrix.tags }}
